def make_models(data, target, num_iter=10, models=['ols', 'lasso', 'ridge', 'enet'],
                complexity='simple', degree=3, graph=['qq', 'r2', 'rmse']):
    x_axis = np.arange(num_iter)
    ols_test = []
    lasso_test = []
    ridge_test = []
    enet_test = []
    a_parms=[0.0001, 0.001, 0.01, 0.1, 1, 10, 20, 50, 100]
    l1_parms = [0.1, 0.5, 0.7, 0.9, 0.95, 0.99, 1.0]
    cv_param=[5, 10, 20]
    sample_models = {}
    model_metrics = {}
    ols_pred = []
    lasso_pred = []
    ridge_pred = []
    enet_pred = []
    


    for val in cv_param:
                for i in range(num_iter):
                    if complexity == 'simple':
                        X_train, X_test, Y_train, Y_test = train_test_split(data, target, test_size=0.2, random_state=42)
                    elif complexity == 'polynomial':
                        poly = PolynomialFeatures(degree=degree)
                        Xp = poly.fit_transform(data)
                        X_train, X_test, Y_train, Y_test = train_test_split(Xp, target, test_size=0.2, random_state=42)
                    elif complexity == 'poly_intx':
                        poly_intx = PolynomialFeatures(degree=degree, interaction_only=True)
                        Xpn = poly_intx.fit_transform(data)
                        X_train, X_test, Y_train, Y_test = train_test_split(Xpn, target, test_size=0.2)
                    scaler = StandardScaler()
                    scaler.fit(X_train)
                    X_train=scaler.transform(X_train)
                    X_test=scaler.transform(X_test)
                    
                    if 'ols' in models:
                        linreg = LinearRegression()
                        ols_model_tr = linreg.fit(X_train, Y_train)
                        train_pred = ols_model_tr.predict(X_train)
                        test_pred = ols_model_tr.predict(X_test)
                        ols_pred = test_pred
                        sample_models['ols'] = ols_model_tr
                        test_score = ols_model_tr.score(X_test, Y_test)
                        ols_test.append(test_score)
                        model_metrics['ols_train_rmse'] = np.sqrt(mean_squared_error(Y_train, train_pred))
                        model_metrics['ols_train_r2'] = ols_model_tr.score(X_train, Y_train)
                        model_metrics['ols_test_rmse'] = np.sqrt(mean_squared_error(Y_test, test_pred))
                        model_metrics['ols_test_r2'] = ols_model_tr.score(X_test, Y_test)
                        
                        
                    if 'lasso' in models:
                        lasso = LassoCV(n_jobs=1, max_iter=5000, tol=0.0001, alphas=a_parms,
                                        normalize=True, cv=val, random_state=42)
                        lasso_model_tr = lasso.fit(X_train, Y_train)
                        train_pred = lasso_model_tr.predict(X_train)
                        test_pred = lasso_model_tr.predict(X_test)
                        lasso_pred=test_pred
                        sample_models['lasso'] = lasso_model_tr
                        test_score = lasso_model_tr.score(X_test, Y_test)
                        lasso_test.append(test_score)
                        model_metrics['lasso_train_rmse'] = np.sqrt(mean_squared_error(Y_train, train_pred))
                        model_metrics['lasso_test_rmse'] = np.sqrt(mean_squared_error(Y_test, test_pred))
                        model_metrics['lasso_train_r2'] = lasso_model_tr.score(X_train, Y_train)
                        model_metrics['lasso_test_r2'] = lasso_model_tr.score(X_test, Y_test)
                        model_metrics['lasso_best_alpha'] = lasso_model_tr.alpha_

                    if 'ridge' in models:
                        ridge = RidgeCV(alphas=a_parms, normalize=True, cv=val)
                        ridge_model_tr = ridge.fit(X_train, Y_train)
                        train_pred = ridge_model_tr.predict(X_train)
                        test_pred = ridge_model_tr.predict(X_test)
                        ridge_pred=test_pred
                        sample_models['ridge'] = ridge_model_tr
                        test_score = ridge_model_tr.score(X_test, Y_test)
                        ridge_test.append(test_score)
                        model_metrics['ridge_train_rmse'] = np.sqrt(mean_squared_error(Y_train, train_pred))
                        model_metrics['ridge_train_r2'] = ridge_model_tr.score(X_train, Y_train)
                        model_metrics['ridge_test_rmse'] = np.sqrt(mean_squared_error(Y_test, test_pred))
                        model_metrics['ridge_test_r2'] = ridge_model_tr.score(X_test, Y_test)
                        model_metrics['ridge_best_alpha'] = ridge_model_tr.alpha_

                    if 'enet' in models:
                        enet = ElasticNetCV(alphas=a_parms,selection='random',tol=0.001, l1_ratio = l1_parms, cv=val,
                                           random_state=42)
                        enet_model_tr = enet.fit(X_train, Y_train)
                        train_pred = enet_model_tr.predict(X_train)
                        test_pred = enet_model_tr.predict(X_test)
                        enet_pred=test_pred
                        sample_models['enet'] = enet_model_tr
                        test_score = enet_model_tr.score(X_test, Y_test)
                        enet_test.append(test_score)
                        model_metrics['enet_train_rmse'] = np.sqrt(mean_squared_error(Y_train, train_pred))
                        model_metrics['enet_test_rmse'] = np.sqrt(mean_squared_error(Y_test, test_pred))
                        model_metrics['enet_train_r2'] = enet_model_tr.score(X_train, Y_train)
                        model_metrics['enet_test_r2'] = enet_model_tr.score(X_test, Y_test)
                        model_metrics['enet_best_alpha'] = enet_model_tr.alpha_

                    i += 1
                    
    if 'qq' in graph:
        if 'ols' in models:
            fig, ax = plt.subplots()
            ax = sm.graphics.qqplot((Y_test - ols_pred), dist=stats.norm, line='45', fit=True)
            plt.title('OLS')
        if 'ridge' in models:
            fig, ax = plt.subplots()
            sm.graphics.qqplot((Y_test - ridge_pred), dist=stats.norm, line='45', fit=True)
            plt.title('RIDGE')
        if 'lasso' in models:
            fig, ax = plt.subplots()
            sm.graphics.qqplot((Y_test - lasso_pred), dist=stats.norm, line='45', fit=True)
            plt.title('LASSO')
        if 'enet' in models:
            fig, ax = plt.subplots()
            sm.graphics.qqplot((Y_test - enet_pred), dist=stats.norm, line='45', fit=True)
            plt.title('ENET')
    if 'r2' in graph:
        if 'ols' in models:
            plt.plot(ols_test, label='ols')
        if 'ridge' in models:
            plt.plot(ridge_test, label='ridge')
        if 'lasso' in models:
            plt.plot(lasso_test, label='lasso')
        if 'enet' in models:
            plt.plot(enet_test, label='enet')
        plt.ylabel('R2 test score')
        plt.xlabel('number of iterations')
        plt.ylim((0.40, 0.99))
        plt.legend()
    # if 'rmse' in graph:


    model_metrics =  pd.DataFrame(model_metrics.items())
    
    return sample_models, model_metrics